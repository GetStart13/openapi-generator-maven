<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>openapi-generator-maven</artifactId>
        <groupId>com.openapi.generator</groupId>
        <relativePath>../pom.xml</relativePath>
        <version>${revision}</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>openapi-application-starter</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-commons</artifactId>
        </dependency>
        <!-- 打印日志 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>

        <!-- ========== openfeign =========== -->
        <!--<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        &lt;!&ndash; loadbalancer 包必须引入，因为 openfeign 底层集成了 ribbon  &ndash;&gt;
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>-->
        <!-- end ============= openFeign =============== -->

    </dependencies>

    <build>
        <plugins>
            <!-- ===== 指定启动类，将依赖放在 libs 目录下 ==== -->
            <!-- 优点 – 透明的流程，我们可以在其中指定每个步骤
                 缺点 – 手动;依赖项不在最终 jar 中，这意味着我们的可执行 jar 只有在 jar 可以访问和可见 libs 文件夹时才运行 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/libs
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>libs/</classpathPrefix>
                            <mainClass>
                                com.springboot.framework.OpenApiApplication
                            </mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>-->
            <!-- end ============== 指定启动类，将依赖导入 libs 的方式打包 =============== -->

            <!-- ============ Apache Maven Shade Plugin =================== -->
            <!--
            优点：所有依赖都在 jar 包中，可重命名工件名，对类可进行重新定位: 打包后类路径仍然是在编译时的类路径，例如: com.example，
                   如果类没有重新定位，它无法作为一个 jar 包被扫描，只能作为一个用于执行的 jar。
            缺点：配置复杂，特别是想要高级功能时。
            -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <transformers>
                                <transformer implementation=
                                                     "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.springboot.framework.OpenApiApplication</mainClass>
                                </transformer>
                            </transformers>
                            &lt;!&ndash; 解决警告：Discovered module-info.class. Shading will break its strong encapsulation. &ndash;&gt;
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>module-info.class</exclude>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
            <!-- end ========= Apache Maven Shade Plugin ================= -->

            <!-- 通过 springboot 配置打包成可执行的 jar，
            优点：不需要 Spring Boot application，可访问文件夹中随处可执行，打包高级可控，从 jar 文件中排除依赖项
            缺点：生成不必要的类文件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.7.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <classifier>spring-boot</classifier>
                            <mainClass>
                                com.openapi.generator.OpenApiApplication
                            </mainClass>
                            <!-- 指示 spring-boot-maven-plugin 使用 PropertiesLauncher -->
                            <layout>ZIP</layout>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- maven-assembly-plugin -->
            <!--
            优点：多模块只打包成一个 jar 包
            缺点：只能对 artifact 进行基本的控制，例如：不支持类的重新定位
            -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.4.2</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <archive>
                                <manifest>
                                    <mainClass>
                                        com.springboot.framework.OpenApiApplication
                                    </mainClass>
                                </manifest>
                            </archive>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->

        </plugins>
    </build>
</project>